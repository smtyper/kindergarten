@page "/CaesarCipherView"
@using Ciphers.Transposition
@using Ciphers
@using System.Numerics
@using System.Reflection
@using System.Text
@using Ciphers.Hackers

<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-md-12">
            <div class="input-group input-group-sm mb-3 w-25">
                <div class="input-group-prepend">
                    <span class="input-group-text btn-dark">Key</span>
                </div>
                <input class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm"
                       @bind="CurrentKeyInput">
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-12">
            <div class="input-group input-group-sm mb-3 w-25">
                <div class="input-group-prepend">
                    <span class="input-group-text btn-dark">Mode</span>
                </div>
                <select class="form-control" @bind="CurrentMode">
                    @foreach (var mode in Enum.GetValues(typeof(Mode)))
                    {
                        <option value="@mode">@mode</option>
                    }
                </select>
            </div>
        </div>
    </div>
    @if (CurrentMode is Mode.Hack)
    {
        <div class="row mt-1">
            <label>Upload file for frequency analysis</label>
            <InputFile OnChange="@LoadFrequencyAnalysisTextAsync"/>
        </div>
    }

    <div class="row mt-3 gx-0">
        <div class="col-md-1">
            <div class="input-group-prepend">
                <span class="input-group-text btn-dark text-center">Alphabet</span>
            </div>
        </div>
        <div class="col-md">
            <select class="form-control" @bind="CurrentAlphabet">
                @foreach (var alphabet in Alphabets)
                {
                    <option value="@alphabet">@alphabet</option>
                }
            </select>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-6">
            <form>
                <div class="form-group">
                    <label for="inputTextArea">Print your text here, or upload a file:</label>
                    <InputFile OnChange="@LoadInputTextAsync"/>
                    <textarea class="form-control mt-2" rows="6" id="inputTextArea" @bind="InputText"></textarea>
                </div>
            </form>
        </div>
        <div class="col-md-6">
            <form>
                <div class="form-group">
                    <label for="outputTextArea">Output:</label>
                    <textarea disabled class="form-control mt-2" rows="6" id="outputTextArea" @bind="OutputText"></textarea>
                </div>
            </form>
        </div>
    </div>
    
    <div class="row mt-3">
        <div class="col-md-12 text-center">
            <button type="button" class="btn btn-light" @onclick="@(() => InputText = OutputText)">←</button>
        </div>
    </div>

    <div class="row mt-3">
        <form>
            <div class="form-group">
                <label for="userAlphabetInput">Print custom alhabet:</label>
                <textarea class="form-control" rows="1" id="userAlphabetInput" @bind="UserAlphabet"></textarea>
            </div>
        </form>
    </div>

</div>

@code 
{
    private const string EnglishLowercase = "abcdefghijklmnopqrstuvwxyz0123456789";
    private const string EnglishUppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    private const string EnglishLowercaseNoDigits = "abcdefghijklmnopqrstuvwxyz";
    private const string RussianLowercase = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя0123456789";
    private const string RussionUppercase = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ0123456789";
    private const string RussianLowercaseNoDigits = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя";

    private string UserAlphabet { get; set; } = string.Empty;

    private IReadOnlyCollection<string> Alphabets => new[]
    {
        EnglishLowercase,
        EnglishUppercase,
        EnglishLowercaseNoDigits,
        RussianLowercase,
        RussionUppercase,
        RussianLowercaseNoDigits,
        UserAlphabet
    };

    private Mode CurrentMode { get; set; } = Mode.Encryption;

    private string CurrentAlphabet { get; set; } = EnglishLowercase;

    private string CurrentKeyInput { get; set; } = "0";

    private int CurrentKey =>
        (int)(BigInteger.Parse(string.Concat(CurrentKeyInput.Where(char.IsDigit))) % CurrentAlphabet.Length);

    private string InputText { get; set; }

    private string OutputText
    {
        get => string.IsNullOrEmpty(InputText) ? 
            null : 
            CurrentMode switch
            {
                Mode.Encryption => GetCipher().EncryptText(InputText),
                Mode.Decryption => GetCipher().DecryptText(InputText),
                Mode.Hack => Hacker.Hack(InputText),
                _ => throw new NotImplementedException()
            };
        set {}
    }


    private Hacker Hacker { get; set; } = new FrequencyAnalysisHacker(EnglishLowercase, string.Empty);

    private Cipher GetCipher() => new CaesarCipher(CurrentAlphabet.ToCharArray(), CurrentKey);

    private async Task LoadInputTextAsync(InputFileChangeEventArgs inputFileArgs)
    {
        var text = await ReadTextFromInputFileAsync(inputFileArgs);

        InputText = text;
    }

    private async Task LoadFrequencyAnalysisTextAsync(InputFileChangeEventArgs inputFileArgs)
    {
        var text = await ReadTextFromInputFileAsync(inputFileArgs);

        Hacker = new FrequencyAnalysisHacker(CurrentAlphabet, text);
    }

    private static async ValueTask<string> ReadTextFromInputFileAsync(InputFileChangeEventArgs inputFileArgs)
    {
        await using var fileStream = inputFileArgs.File.OpenReadStream(1024000L);
        using var streamReader = new StreamReader(fileStream, Encoding.UTF8);

        var text = await streamReader.ReadToEndAsync();

        return text;
    }

    public enum Mode
    {
        Encryption,
        Decryption,
        Hack
    }
}